diff -Nur elfutils-0.160/libelf/elf32_updatefile.c elfutils-0.160n/libelf/elf32_updatefile.c
--- elfutils-0.160/libelf/elf32_updatefile.c	2014-08-27 17:25:17.000000000 -0800
+++ elfutils-0.160n/libelf/elf32_updatefile.c	2014-10-23 14:44:00.384128198 -0800
@@ -100,7 +100,31 @@
   qsort (scns, scnp - scns, sizeof (*scns), compare_sections);
 }
 
-
+static void
+fill_mmap (char* last_position,
+                char* const shdr_start,
+                char* const shdr_end,
+                char* scn_start,
+                size_t offset)
+     {
+       size_t written = 0;
+
+       if (last_position < shdr_start)
+         {
+       written = MIN (scn_start + offset - last_position,
+                  shdr_start - last_position);
+
+       memset (last_position, __libelf_fill_byte, written);
+         }
+
+       if (last_position + written != scn_start + offset
+       && shdr_end < scn_start + offset)
+         {
+       char *fill_start = MAX (shdr_end, scn_start);
+       memset (fill_start, __libelf_fill_byte,
+           scn_start + offset - fill_start);
+         }
+     }
 int
 internal_function
 __elfw2(LIBELFBITS,updatemmap) (Elf *elf, int change_bo, size_t shnum)
@@ -293,27 +317,6 @@
 	  Elf_Data_List *dl = &scn->data_list;
 	  bool scn_changed = false;
 
-	  void fill_mmap (size_t offset)
-	  {
-	    size_t written = 0;
-
-	    if (last_position < shdr_start)
-	      {
-		written = MIN (scn_start + offset - last_position,
-			       shdr_start - last_position);
-
-		memset (last_position, __libelf_fill_byte, written);
-	      }
-
-	    if (last_position + written != scn_start + offset
-		&& shdr_end < scn_start + offset)
-	      {
-		char *fill_start = MAX (shdr_end, scn_start);
-		memset (fill_start, __libelf_fill_byte,
-			scn_start + offset - fill_start);
-	      }
-	  }
-
 	  if (scn->data_list_rear != NULL)
 	    do
 	      {
@@ -328,7 +331,11 @@
 			|| ((scn->flags | dl->flags | elf->flags)
 			    & ELF_F_DIRTY) != 0))
 		  {
-		    fill_mmap (dl->data.d.d_off);
+            fill_mmap (last_position,
+                         shdr_start,
+                         shdr_end,
+                         scn_start,
+                         dl->data.d.d_off);
 		    last_position = scn_start + dl->data.d.d_off;
 		  }
 
@@ -380,8 +387,11 @@
 	      /* If the previous section (or the ELF/program
 		 header) changed we might have to fill the gap.  */
 	      if (scn_start > last_position && previous_scn_changed)
-		fill_mmap (0);
-
+              fill_mmap (last_position,
+                         shdr_start,
+                         shdr_end,
+                         scn_start,
+                         0);
 	      /* We have to trust the existing section header information.  */
 	      last_position = scn_start + shdr->sh_size;
 	    }
diff -Nur elfutils-0.160/libelf/elf_begin.c elfutils-0.160n/libelf/elf_begin.c
--- elfutils-0.160/libelf/elf_begin.c	2014-10-23 14:41:18.818597273 -0800
+++ elfutils-0.160n/libelf/elf_begin.c	2014-10-23 14:45:34.577437847 -0800
@@ -1006,6 +1006,22 @@
 }
 
 
+Elf *
+lock_dup_elf (fildes, cmd, ref)
+     int fildes;
+     Elf_Cmd cmd;
+     Elf *ref;
+{
+  /* We need wrlock to dup an archive.  */
+  if (ref->kind == ELF_K_AR)
+  {
+   rwlock_unlock (ref->lock);
+   rwlock_wrlock (ref->lock);
+  }
+
+  /* Duplicate the descriptor.  */
+  return dup_elf (fildes, cmd, ref);
+}
 /* Return a descriptor for the file belonging to FILDES.  */
 Elf *
 elf_begin (fildes, cmd, ref)
@@ -1032,19 +1048,6 @@
       return NULL;
     }
 
-  Elf *lock_dup_elf ()
-  {
-    /* We need wrlock to dup an archive.  */
-    if (ref->kind == ELF_K_AR)
-      {
-	rwlock_unlock (ref->lock);
-	rwlock_wrlock (ref->lock);
-      }
-
-    /* Duplicate the descriptor.  */
-    return dup_elf (fildes, cmd, ref);
-  }
-
   switch (cmd)
     {
     case ELF_C_NULL:
@@ -1065,7 +1068,7 @@
     case ELF_C_READ:
     case ELF_C_READ_MMAP:
       if (ref != NULL)
-	retval = lock_dup_elf ();
+	retval = lock_dup_elf (fildes, cmd, ref); 
       else
 	/* Create descriptor for existing file.  */
 	retval = read_file (fildes, 0, ~((size_t) 0), cmd, NULL);
@@ -1086,7 +1089,7 @@
 	      retval = NULL;
 	    }
 	  else
-	    retval = lock_dup_elf ();
+	    retval = lock_dup_elf (fildes, cmd, ref);
 	}
       else
 	/* Create descriptor for existing file.  */
