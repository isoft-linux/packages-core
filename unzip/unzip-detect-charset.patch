diff -Nur unzip-5.50/fileio.c unzip-5.50n/fileio.c
--- unzip-5.50/fileio.c	2004-07-04 20:28:41.000000000 +0800
+++ unzip-5.50n/fileio.c	2004-07-04 20:29:02.000000000 +0800
@@ -75,6 +75,8 @@
 #include "ebcdic.h"   /* definition/initialization of ebcdic[] */
 
 
+#define ICONV_BUF_SIZE  260
+
 /*
    Note: Under Windows, the maximum size of the buffer that can be used
    with any of the *printf calls is 16,384, so win_fprintf was used to
@@ -1918,6 +1920,84 @@
 #endif /* !VMS && !OS2 && !CMS_MVS */
 
 
+int isUtf8(const char *buf)
+{
+  int i, n;
+  register unsigned char c;
+  int gotone = 0;
+
+  if (!buf)
+    return 1; // whatever, just don't crash
+
+#define F 0   /* character never appears in text */
+#define T 1   /* character appears in plain ASCII text */
+#define I 2   /* character appears in ISO-8859 text */
+#define X 3   /* character appears in non-ISO extended ASCII (Mac, IBM PC) */
+
+  static const unsigned char text_chars[256] = {
+        /*                  BEL BS HT LF    FF CR    */
+        F, F, F, F, F, F, F, T, T, T, T, F, T, T, F, F,  /* 0x0X */
+        /*                              ESC          */
+        F, F, F, F, F, F, F, F, F, F, F, T, F, F, F, F,  /* 0x1X */
+        T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T,  /* 0x2X */
+        T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T,  /* 0x3X */
+        T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T,  /* 0x4X */
+        T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T,  /* 0x5X */
+        T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T,  /* 0x6X */
+        T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, F,  /* 0x7X */
+        /*            NEL                            */
+        X, X, X, X, X, T, X, X, X, X, X, X, X, X, X, X,  /* 0x8X */
+        X, X, X, X, X, X, X, X, X, X, X, X, X, X, X, X,  /* 0x9X */
+        I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I,  /* 0xaX */
+        I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I,  /* 0xbX */
+        I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I,  /* 0xcX */
+        I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I,  /* 0xdX */
+        I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I,  /* 0xeX */
+        I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I   /* 0xfX */
+  };
+  /* *ulen = 0; */
+  for (i = 0; (c = buf[i]); i++) {
+    if ((c & 0x80) == 0) {        /* 0xxxxxxx is plain ASCII */
+      /*
+       * Even if the whole file is valid UTF-8 sequences,
+       * still reject it if it uses weird control characters.
+       */
+
+      if (text_chars[c] != T)
+        return 0;
+
+    } else if ((c & 0x40) == 0) { /* 10xxxxxx never 1st byte */
+      return 0;
+    } else {                           /* 11xxxxxx begins UTF-8 */
+      int following;
+
+    if ((c & 0x20) == 0) {             /* 110xxxxx */
+      following = 1;
+    } else if ((c & 0x10) == 0) {      /* 1110xxxx */
+      following = 2;
+    } else if ((c & 0x08) == 0) {      /* 11110xxx */
+      following = 3;
+    } else if ((c & 0x04) == 0) {      /* 111110xx */
+      following = 4;
+    } else if ((c & 0x02) == 0) {      /* 1111110x */
+      following = 5;
+    } else
+      return 0;
+
+      for (n = 0; n < following; n++) {
+        i++;
+        if (!(c = buf[i]))
+          goto done;
+
+        if ((c & 0x80) == 0 || (c & 0x40))
+          return 0;
+      }
+      gotone = 1;
+    }
+  }
+done:
+  return gotone;   /* don't claim it's UTF-8 if it's all 7-bit */
+}
 
 
 
@@ -2133,11 +2213,15 @@
             return PK_EOF;
         G.filename[length] = '\0';      /* terminate w/zero:  ASCIIZ */
 
+
         /* translate the Zip entry filename code to set utf-8 */
 #include <iconv.h>
 #include "utf.h"
 
 #define ICONV_BUF_SIZE	260
+
+	if(!isUtf8(G.filename))
+	{	
 		size_t ileft, oleft;
 		iconv_t cd;
 		size_t iconv_result;
@@ -2162,7 +2246,7 @@
 		
 		iconv_close(cd);
 				
-
+	}
         if (G.pInfo->lcflag)      /* replace with lowercase filename */
             STRLOWER(G.filename, G.filename);
 
