<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
<title>svntogit/packages.git - Git clone of the 'packages' repository
</title>
<meta name='generator' content='cgit v0.10.2'/>
<meta name='robots' content='index, nofollow'/>
<link rel='stylesheet' type='text/css' href='/cgit.css'/>
<link rel='shortcut icon' href='/favicon.ico'/>
<link rel='alternate' title='Atom feed' href='https://projects.archlinux.org/svntogit/packages.git/atom/trunk/glibc-2.22-CVE-2015-7547.patch?h=packages/glibc' type='application/atom+xml'/>
<link rel='vcs-git' href='git://projects.archlinux.org/svntogit/packages.git' title='svntogit/packages.git Git repository'/>
<link rel='vcs-git' href='http://projects.archlinux.org/git/svntogit/packages.git' title='svntogit/packages.git Git repository'/>
<link rel='vcs-git' href='https://projects.archlinux.org/git/svntogit/packages.git' title='svntogit/packages.git Git repository'/>
<link rel='vcs-git' href='ssh://gerolde.archlinux.org/srv/projects/git/svntogit/packages.git' title='svntogit/packages.git Git repository'/>
</head>
<body>
	<div id="archnavbar"><!-- Arch Linux global navigation bar -->
		<div id="archnavbarlogo">
			<p><a href="http://www.archlinux.org/" title="Arch news, packages, projects and more"></a></p>
		</div>
		<div id="archnavbarmenu">
			<ul id="archnavbarlist">
				<li id="anb-home"><a href="http://www.archlinux.org/" title="Arch news, packages, projects and more">Home</a></li>
				<li id="anb-packages"><a href="http://www.archlinux.org/packages/" title="Arch Package Database">Packages</a></li>
				<li id="anb-forums"><a href="https://bbs.archlinux.org/" title="Community forums">Forums</a></li>
				<li id="anb-wiki"><a href="https://wiki.archlinux.org/" title="Community documentation">Wiki</a></li>
				<li id="anb-bugs"><a href="https://bugs.archlinux.org/" title="Report and follow bugs">Bugs</a></li>
				<li id="anb-aur"><a href="https://aur.archlinux.org/" title="Arch Linux User Repository">AUR</a></li>
				<li id="anb-download"><a href="http://www.archlinux.org/download/" title="Get Arch Linux">Download</a></li>
			</ul>
		</div>
	</div><!-- #archnavbar -->
<div id='cgit'><table id='header'>
<tr>
<td class='main'><a href='/'>index</a> : <a title='svntogit/packages.git' href='/svntogit/packages.git/'>svntogit/packages.git</a></td></tr>
<tr><td class='sub'>Git clone of the 'packages' repository
</td><td class='sub right'></td></tr></table>
<table class='tabs'><tr><td>
<a href='/svntogit/packages.git/?h=packages/glibc'>summary</a><a href='/svntogit/packages.git/refs/?h=packages/glibc'>refs</a><a href='/svntogit/packages.git/log/trunk/glibc-2.22-CVE-2015-7547.patch?h=packages/glibc'>log</a><a class='active' href='/svntogit/packages.git/tree/trunk/glibc-2.22-CVE-2015-7547.patch?h=packages/glibc'>tree</a><a href='/svntogit/packages.git/commit/trunk/glibc-2.22-CVE-2015-7547.patch?h=packages/glibc'>commit</a><a href='/svntogit/packages.git/diff/trunk/glibc-2.22-CVE-2015-7547.patch?h=packages/glibc'>diff</a><a href='/svntogit/packages.git/stats/trunk/glibc-2.22-CVE-2015-7547.patch?h=packages/glibc'>stats</a></td><td class='form'><form class='right' method='get' action='/svntogit/packages.git/log/trunk/glibc-2.22-CVE-2015-7547.patch'>
<input type='hidden' name='h' value='packages/glibc'/><select name='qt'>
<option value='grep'>log msg</option>
<option value='author'>author</option>
<option value='committer'>committer</option>
<option value='range'>range</option>
</select>
<input class='txt' type='text' size='10' name='q' value=''/>
<input type='submit' value='search'/>
</form>
</td></tr></table>
<div class='path'>path: <a href='/svntogit/packages.git/tree/?h=packages/glibc'>root</a>/<a href='/svntogit/packages.git/tree/trunk?h=packages/glibc'>trunk</a>/<a href='/svntogit/packages.git/tree/trunk/glibc-2.22-CVE-2015-7547.patch?h=packages/glibc'>glibc-2.22-CVE-2015-7547.patch</a></div><div class='content'>blob: 525ee4990ce26b0d954ee3544aea42e3c468080b (<a href='/svntogit/packages.git/plain/trunk/glibc-2.22-CVE-2015-7547.patch?h=packages/glibc'>plain</a>)
<table summary='blob content' class='blob'>
<tr><td class='linenumbers'><pre><a id='n1' href='#n1'>1</a>
<a id='n2' href='#n2'>2</a>
<a id='n3' href='#n3'>3</a>
<a id='n4' href='#n4'>4</a>
<a id='n5' href='#n5'>5</a>
<a id='n6' href='#n6'>6</a>
<a id='n7' href='#n7'>7</a>
<a id='n8' href='#n8'>8</a>
<a id='n9' href='#n9'>9</a>
<a id='n10' href='#n10'>10</a>
<a id='n11' href='#n11'>11</a>
<a id='n12' href='#n12'>12</a>
<a id='n13' href='#n13'>13</a>
<a id='n14' href='#n14'>14</a>
<a id='n15' href='#n15'>15</a>
<a id='n16' href='#n16'>16</a>
<a id='n17' href='#n17'>17</a>
<a id='n18' href='#n18'>18</a>
<a id='n19' href='#n19'>19</a>
<a id='n20' href='#n20'>20</a>
<a id='n21' href='#n21'>21</a>
<a id='n22' href='#n22'>22</a>
<a id='n23' href='#n23'>23</a>
<a id='n24' href='#n24'>24</a>
<a id='n25' href='#n25'>25</a>
<a id='n26' href='#n26'>26</a>
<a id='n27' href='#n27'>27</a>
<a id='n28' href='#n28'>28</a>
<a id='n29' href='#n29'>29</a>
<a id='n30' href='#n30'>30</a>
<a id='n31' href='#n31'>31</a>
<a id='n32' href='#n32'>32</a>
<a id='n33' href='#n33'>33</a>
<a id='n34' href='#n34'>34</a>
<a id='n35' href='#n35'>35</a>
<a id='n36' href='#n36'>36</a>
<a id='n37' href='#n37'>37</a>
<a id='n38' href='#n38'>38</a>
<a id='n39' href='#n39'>39</a>
<a id='n40' href='#n40'>40</a>
<a id='n41' href='#n41'>41</a>
<a id='n42' href='#n42'>42</a>
<a id='n43' href='#n43'>43</a>
<a id='n44' href='#n44'>44</a>
<a id='n45' href='#n45'>45</a>
<a id='n46' href='#n46'>46</a>
<a id='n47' href='#n47'>47</a>
<a id='n48' href='#n48'>48</a>
<a id='n49' href='#n49'>49</a>
<a id='n50' href='#n50'>50</a>
<a id='n51' href='#n51'>51</a>
<a id='n52' href='#n52'>52</a>
<a id='n53' href='#n53'>53</a>
<a id='n54' href='#n54'>54</a>
<a id='n55' href='#n55'>55</a>
<a id='n56' href='#n56'>56</a>
<a id='n57' href='#n57'>57</a>
<a id='n58' href='#n58'>58</a>
<a id='n59' href='#n59'>59</a>
<a id='n60' href='#n60'>60</a>
<a id='n61' href='#n61'>61</a>
<a id='n62' href='#n62'>62</a>
<a id='n63' href='#n63'>63</a>
<a id='n64' href='#n64'>64</a>
<a id='n65' href='#n65'>65</a>
<a id='n66' href='#n66'>66</a>
<a id='n67' href='#n67'>67</a>
<a id='n68' href='#n68'>68</a>
<a id='n69' href='#n69'>69</a>
<a id='n70' href='#n70'>70</a>
<a id='n71' href='#n71'>71</a>
<a id='n72' href='#n72'>72</a>
<a id='n73' href='#n73'>73</a>
<a id='n74' href='#n74'>74</a>
<a id='n75' href='#n75'>75</a>
<a id='n76' href='#n76'>76</a>
<a id='n77' href='#n77'>77</a>
<a id='n78' href='#n78'>78</a>
<a id='n79' href='#n79'>79</a>
<a id='n80' href='#n80'>80</a>
<a id='n81' href='#n81'>81</a>
<a id='n82' href='#n82'>82</a>
<a id='n83' href='#n83'>83</a>
<a id='n84' href='#n84'>84</a>
<a id='n85' href='#n85'>85</a>
<a id='n86' href='#n86'>86</a>
<a id='n87' href='#n87'>87</a>
<a id='n88' href='#n88'>88</a>
<a id='n89' href='#n89'>89</a>
<a id='n90' href='#n90'>90</a>
<a id='n91' href='#n91'>91</a>
<a id='n92' href='#n92'>92</a>
<a id='n93' href='#n93'>93</a>
<a id='n94' href='#n94'>94</a>
<a id='n95' href='#n95'>95</a>
<a id='n96' href='#n96'>96</a>
<a id='n97' href='#n97'>97</a>
<a id='n98' href='#n98'>98</a>
<a id='n99' href='#n99'>99</a>
<a id='n100' href='#n100'>100</a>
<a id='n101' href='#n101'>101</a>
<a id='n102' href='#n102'>102</a>
<a id='n103' href='#n103'>103</a>
<a id='n104' href='#n104'>104</a>
<a id='n105' href='#n105'>105</a>
<a id='n106' href='#n106'>106</a>
<a id='n107' href='#n107'>107</a>
<a id='n108' href='#n108'>108</a>
<a id='n109' href='#n109'>109</a>
<a id='n110' href='#n110'>110</a>
<a id='n111' href='#n111'>111</a>
<a id='n112' href='#n112'>112</a>
<a id='n113' href='#n113'>113</a>
<a id='n114' href='#n114'>114</a>
<a id='n115' href='#n115'>115</a>
<a id='n116' href='#n116'>116</a>
<a id='n117' href='#n117'>117</a>
<a id='n118' href='#n118'>118</a>
<a id='n119' href='#n119'>119</a>
<a id='n120' href='#n120'>120</a>
<a id='n121' href='#n121'>121</a>
<a id='n122' href='#n122'>122</a>
<a id='n123' href='#n123'>123</a>
<a id='n124' href='#n124'>124</a>
<a id='n125' href='#n125'>125</a>
<a id='n126' href='#n126'>126</a>
<a id='n127' href='#n127'>127</a>
<a id='n128' href='#n128'>128</a>
<a id='n129' href='#n129'>129</a>
<a id='n130' href='#n130'>130</a>
<a id='n131' href='#n131'>131</a>
<a id='n132' href='#n132'>132</a>
<a id='n133' href='#n133'>133</a>
<a id='n134' href='#n134'>134</a>
<a id='n135' href='#n135'>135</a>
<a id='n136' href='#n136'>136</a>
<a id='n137' href='#n137'>137</a>
<a id='n138' href='#n138'>138</a>
<a id='n139' href='#n139'>139</a>
<a id='n140' href='#n140'>140</a>
<a id='n141' href='#n141'>141</a>
<a id='n142' href='#n142'>142</a>
<a id='n143' href='#n143'>143</a>
<a id='n144' href='#n144'>144</a>
<a id='n145' href='#n145'>145</a>
<a id='n146' href='#n146'>146</a>
<a id='n147' href='#n147'>147</a>
<a id='n148' href='#n148'>148</a>
<a id='n149' href='#n149'>149</a>
<a id='n150' href='#n150'>150</a>
<a id='n151' href='#n151'>151</a>
<a id='n152' href='#n152'>152</a>
<a id='n153' href='#n153'>153</a>
<a id='n154' href='#n154'>154</a>
<a id='n155' href='#n155'>155</a>
<a id='n156' href='#n156'>156</a>
<a id='n157' href='#n157'>157</a>
<a id='n158' href='#n158'>158</a>
<a id='n159' href='#n159'>159</a>
<a id='n160' href='#n160'>160</a>
<a id='n161' href='#n161'>161</a>
<a id='n162' href='#n162'>162</a>
<a id='n163' href='#n163'>163</a>
<a id='n164' href='#n164'>164</a>
<a id='n165' href='#n165'>165</a>
<a id='n166' href='#n166'>166</a>
<a id='n167' href='#n167'>167</a>
<a id='n168' href='#n168'>168</a>
<a id='n169' href='#n169'>169</a>
<a id='n170' href='#n170'>170</a>
<a id='n171' href='#n171'>171</a>
<a id='n172' href='#n172'>172</a>
<a id='n173' href='#n173'>173</a>
<a id='n174' href='#n174'>174</a>
<a id='n175' href='#n175'>175</a>
<a id='n176' href='#n176'>176</a>
<a id='n177' href='#n177'>177</a>
<a id='n178' href='#n178'>178</a>
<a id='n179' href='#n179'>179</a>
<a id='n180' href='#n180'>180</a>
<a id='n181' href='#n181'>181</a>
<a id='n182' href='#n182'>182</a>
<a id='n183' href='#n183'>183</a>
<a id='n184' href='#n184'>184</a>
<a id='n185' href='#n185'>185</a>
<a id='n186' href='#n186'>186</a>
<a id='n187' href='#n187'>187</a>
<a id='n188' href='#n188'>188</a>
<a id='n189' href='#n189'>189</a>
<a id='n190' href='#n190'>190</a>
<a id='n191' href='#n191'>191</a>
<a id='n192' href='#n192'>192</a>
<a id='n193' href='#n193'>193</a>
<a id='n194' href='#n194'>194</a>
<a id='n195' href='#n195'>195</a>
<a id='n196' href='#n196'>196</a>
<a id='n197' href='#n197'>197</a>
<a id='n198' href='#n198'>198</a>
<a id='n199' href='#n199'>199</a>
<a id='n200' href='#n200'>200</a>
<a id='n201' href='#n201'>201</a>
<a id='n202' href='#n202'>202</a>
<a id='n203' href='#n203'>203</a>
<a id='n204' href='#n204'>204</a>
<a id='n205' href='#n205'>205</a>
<a id='n206' href='#n206'>206</a>
<a id='n207' href='#n207'>207</a>
<a id='n208' href='#n208'>208</a>
<a id='n209' href='#n209'>209</a>
<a id='n210' href='#n210'>210</a>
<a id='n211' href='#n211'>211</a>
<a id='n212' href='#n212'>212</a>
<a id='n213' href='#n213'>213</a>
<a id='n214' href='#n214'>214</a>
<a id='n215' href='#n215'>215</a>
<a id='n216' href='#n216'>216</a>
<a id='n217' href='#n217'>217</a>
<a id='n218' href='#n218'>218</a>
<a id='n219' href='#n219'>219</a>
<a id='n220' href='#n220'>220</a>
<a id='n221' href='#n221'>221</a>
<a id='n222' href='#n222'>222</a>
<a id='n223' href='#n223'>223</a>
<a id='n224' href='#n224'>224</a>
<a id='n225' href='#n225'>225</a>
<a id='n226' href='#n226'>226</a>
<a id='n227' href='#n227'>227</a>
<a id='n228' href='#n228'>228</a>
<a id='n229' href='#n229'>229</a>
<a id='n230' href='#n230'>230</a>
<a id='n231' href='#n231'>231</a>
<a id='n232' href='#n232'>232</a>
<a id='n233' href='#n233'>233</a>
<a id='n234' href='#n234'>234</a>
<a id='n235' href='#n235'>235</a>
<a id='n236' href='#n236'>236</a>
<a id='n237' href='#n237'>237</a>
<a id='n238' href='#n238'>238</a>
<a id='n239' href='#n239'>239</a>
<a id='n240' href='#n240'>240</a>
<a id='n241' href='#n241'>241</a>
<a id='n242' href='#n242'>242</a>
<a id='n243' href='#n243'>243</a>
<a id='n244' href='#n244'>244</a>
<a id='n245' href='#n245'>245</a>
<a id='n246' href='#n246'>246</a>
<a id='n247' href='#n247'>247</a>
<a id='n248' href='#n248'>248</a>
<a id='n249' href='#n249'>249</a>
<a id='n250' href='#n250'>250</a>
<a id='n251' href='#n251'>251</a>
<a id='n252' href='#n252'>252</a>
<a id='n253' href='#n253'>253</a>
<a id='n254' href='#n254'>254</a>
<a id='n255' href='#n255'>255</a>
<a id='n256' href='#n256'>256</a>
<a id='n257' href='#n257'>257</a>
<a id='n258' href='#n258'>258</a>
<a id='n259' href='#n259'>259</a>
<a id='n260' href='#n260'>260</a>
<a id='n261' href='#n261'>261</a>
<a id='n262' href='#n262'>262</a>
<a id='n263' href='#n263'>263</a>
<a id='n264' href='#n264'>264</a>
<a id='n265' href='#n265'>265</a>
<a id='n266' href='#n266'>266</a>
<a id='n267' href='#n267'>267</a>
<a id='n268' href='#n268'>268</a>
<a id='n269' href='#n269'>269</a>
<a id='n270' href='#n270'>270</a>
<a id='n271' href='#n271'>271</a>
<a id='n272' href='#n272'>272</a>
<a id='n273' href='#n273'>273</a>
<a id='n274' href='#n274'>274</a>
<a id='n275' href='#n275'>275</a>
<a id='n276' href='#n276'>276</a>
<a id='n277' href='#n277'>277</a>
<a id='n278' href='#n278'>278</a>
<a id='n279' href='#n279'>279</a>
<a id='n280' href='#n280'>280</a>
<a id='n281' href='#n281'>281</a>
<a id='n282' href='#n282'>282</a>
<a id='n283' href='#n283'>283</a>
<a id='n284' href='#n284'>284</a>
<a id='n285' href='#n285'>285</a>
<a id='n286' href='#n286'>286</a>
<a id='n287' href='#n287'>287</a>
<a id='n288' href='#n288'>288</a>
<a id='n289' href='#n289'>289</a>
<a id='n290' href='#n290'>290</a>
<a id='n291' href='#n291'>291</a>
<a id='n292' href='#n292'>292</a>
<a id='n293' href='#n293'>293</a>
<a id='n294' href='#n294'>294</a>
<a id='n295' href='#n295'>295</a>
<a id='n296' href='#n296'>296</a>
<a id='n297' href='#n297'>297</a>
<a id='n298' href='#n298'>298</a>
<a id='n299' href='#n299'>299</a>
<a id='n300' href='#n300'>300</a>
<a id='n301' href='#n301'>301</a>
<a id='n302' href='#n302'>302</a>
<a id='n303' href='#n303'>303</a>
<a id='n304' href='#n304'>304</a>
<a id='n305' href='#n305'>305</a>
<a id='n306' href='#n306'>306</a>
<a id='n307' href='#n307'>307</a>
<a id='n308' href='#n308'>308</a>
<a id='n309' href='#n309'>309</a>
<a id='n310' href='#n310'>310</a>
<a id='n311' href='#n311'>311</a>
<a id='n312' href='#n312'>312</a>
<a id='n313' href='#n313'>313</a>
<a id='n314' href='#n314'>314</a>
<a id='n315' href='#n315'>315</a>
<a id='n316' href='#n316'>316</a>
<a id='n317' href='#n317'>317</a>
<a id='n318' href='#n318'>318</a>
<a id='n319' href='#n319'>319</a>
<a id='n320' href='#n320'>320</a>
<a id='n321' href='#n321'>321</a>
<a id='n322' href='#n322'>322</a>
<a id='n323' href='#n323'>323</a>
<a id='n324' href='#n324'>324</a>
<a id='n325' href='#n325'>325</a>
<a id='n326' href='#n326'>326</a>
<a id='n327' href='#n327'>327</a>
<a id='n328' href='#n328'>328</a>
<a id='n329' href='#n329'>329</a>
<a id='n330' href='#n330'>330</a>
<a id='n331' href='#n331'>331</a>
<a id='n332' href='#n332'>332</a>
<a id='n333' href='#n333'>333</a>
<a id='n334' href='#n334'>334</a>
<a id='n335' href='#n335'>335</a>
<a id='n336' href='#n336'>336</a>
<a id='n337' href='#n337'>337</a>
<a id='n338' href='#n338'>338</a>
<a id='n339' href='#n339'>339</a>
<a id='n340' href='#n340'>340</a>
<a id='n341' href='#n341'>341</a>
<a id='n342' href='#n342'>342</a>
<a id='n343' href='#n343'>343</a>
<a id='n344' href='#n344'>344</a>
<a id='n345' href='#n345'>345</a>
<a id='n346' href='#n346'>346</a>
<a id='n347' href='#n347'>347</a>
<a id='n348' href='#n348'>348</a>
<a id='n349' href='#n349'>349</a>
<a id='n350' href='#n350'>350</a>
<a id='n351' href='#n351'>351</a>
<a id='n352' href='#n352'>352</a>
<a id='n353' href='#n353'>353</a>
<a id='n354' href='#n354'>354</a>
<a id='n355' href='#n355'>355</a>
<a id='n356' href='#n356'>356</a>
<a id='n357' href='#n357'>357</a>
<a id='n358' href='#n358'>358</a>
<a id='n359' href='#n359'>359</a>
<a id='n360' href='#n360'>360</a>
<a id='n361' href='#n361'>361</a>
<a id='n362' href='#n362'>362</a>
<a id='n363' href='#n363'>363</a>
<a id='n364' href='#n364'>364</a>
<a id='n365' href='#n365'>365</a>
<a id='n366' href='#n366'>366</a>
<a id='n367' href='#n367'>367</a>
<a id='n368' href='#n368'>368</a>
<a id='n369' href='#n369'>369</a>
<a id='n370' href='#n370'>370</a>
<a id='n371' href='#n371'>371</a>
<a id='n372' href='#n372'>372</a>
<a id='n373' href='#n373'>373</a>
<a id='n374' href='#n374'>374</a>
<a id='n375' href='#n375'>375</a>
<a id='n376' href='#n376'>376</a>
<a id='n377' href='#n377'>377</a>
<a id='n378' href='#n378'>378</a>
<a id='n379' href='#n379'>379</a>
<a id='n380' href='#n380'>380</a>
<a id='n381' href='#n381'>381</a>
<a id='n382' href='#n382'>382</a>
<a id='n383' href='#n383'>383</a>
<a id='n384' href='#n384'>384</a>
<a id='n385' href='#n385'>385</a>
<a id='n386' href='#n386'>386</a>
<a id='n387' href='#n387'>387</a>
<a id='n388' href='#n388'>388</a>
<a id='n389' href='#n389'>389</a>
<a id='n390' href='#n390'>390</a>
<a id='n391' href='#n391'>391</a>
<a id='n392' href='#n392'>392</a>
<a id='n393' href='#n393'>393</a>
<a id='n394' href='#n394'>394</a>
<a id='n395' href='#n395'>395</a>
<a id='n396' href='#n396'>396</a>
<a id='n397' href='#n397'>397</a>
<a id='n398' href='#n398'>398</a>
<a id='n399' href='#n399'>399</a>
<a id='n400' href='#n400'>400</a>
<a id='n401' href='#n401'>401</a>
<a id='n402' href='#n402'>402</a>
<a id='n403' href='#n403'>403</a>
<a id='n404' href='#n404'>404</a>
<a id='n405' href='#n405'>405</a>
<a id='n406' href='#n406'>406</a>
<a id='n407' href='#n407'>407</a>
<a id='n408' href='#n408'>408</a>
<a id='n409' href='#n409'>409</a>
<a id='n410' href='#n410'>410</a>
<a id='n411' href='#n411'>411</a>
<a id='n412' href='#n412'>412</a>
<a id='n413' href='#n413'>413</a>
<a id='n414' href='#n414'>414</a>
<a id='n415' href='#n415'>415</a>
<a id='n416' href='#n416'>416</a>
<a id='n417' href='#n417'>417</a>
<a id='n418' href='#n418'>418</a>
<a id='n419' href='#n419'>419</a>
<a id='n420' href='#n420'>420</a>
<a id='n421' href='#n421'>421</a>
<a id='n422' href='#n422'>422</a>
<a id='n423' href='#n423'>423</a>
<a id='n424' href='#n424'>424</a>
<a id='n425' href='#n425'>425</a>
<a id='n426' href='#n426'>426</a>
<a id='n427' href='#n427'>427</a>
<a id='n428' href='#n428'>428</a>
<a id='n429' href='#n429'>429</a>
<a id='n430' href='#n430'>430</a>
<a id='n431' href='#n431'>431</a>
<a id='n432' href='#n432'>432</a>
<a id='n433' href='#n433'>433</a>
<a id='n434' href='#n434'>434</a>
<a id='n435' href='#n435'>435</a>
<a id='n436' href='#n436'>436</a>
<a id='n437' href='#n437'>437</a>
<a id='n438' href='#n438'>438</a>
<a id='n439' href='#n439'>439</a>
<a id='n440' href='#n440'>440</a>
<a id='n441' href='#n441'>441</a>
<a id='n442' href='#n442'>442</a>
<a id='n443' href='#n443'>443</a>
<a id='n444' href='#n444'>444</a>
<a id='n445' href='#n445'>445</a>
<a id='n446' href='#n446'>446</a>
<a id='n447' href='#n447'>447</a>
<a id='n448' href='#n448'>448</a>
<a id='n449' href='#n449'>449</a>
<a id='n450' href='#n450'>450</a>
<a id='n451' href='#n451'>451</a>
<a id='n452' href='#n452'>452</a>
<a id='n453' href='#n453'>453</a>
<a id='n454' href='#n454'>454</a>
<a id='n455' href='#n455'>455</a>
<a id='n456' href='#n456'>456</a>
<a id='n457' href='#n457'>457</a>
<a id='n458' href='#n458'>458</a>
<a id='n459' href='#n459'>459</a>
<a id='n460' href='#n460'>460</a>
<a id='n461' href='#n461'>461</a>
<a id='n462' href='#n462'>462</a>
<a id='n463' href='#n463'>463</a>
<a id='n464' href='#n464'>464</a>
<a id='n465' href='#n465'>465</a>
<a id='n466' href='#n466'>466</a>
<a id='n467' href='#n467'>467</a>
<a id='n468' href='#n468'>468</a>
<a id='n469' href='#n469'>469</a>
<a id='n470' href='#n470'>470</a>
<a id='n471' href='#n471'>471</a>
<a id='n472' href='#n472'>472</a>
<a id='n473' href='#n473'>473</a>
<a id='n474' href='#n474'>474</a>
<a id='n475' href='#n475'>475</a>
<a id='n476' href='#n476'>476</a>
<a id='n477' href='#n477'>477</a>
<a id='n478' href='#n478'>478</a>
<a id='n479' href='#n479'>479</a>
<a id='n480' href='#n480'>480</a>
<a id='n481' href='#n481'>481</a>
<a id='n482' href='#n482'>482</a>
<a id='n483' href='#n483'>483</a>
<a id='n484' href='#n484'>484</a>
<a id='n485' href='#n485'>485</a>
<a id='n486' href='#n486'>486</a>
<a id='n487' href='#n487'>487</a>
<a id='n488' href='#n488'>488</a>
<a id='n489' href='#n489'>489</a>
<a id='n490' href='#n490'>490</a>
<a id='n491' href='#n491'>491</a>
<a id='n492' href='#n492'>492</a>
<a id='n493' href='#n493'>493</a>
<a id='n494' href='#n494'>494</a>
<a id='n495' href='#n495'>495</a>
<a id='n496' href='#n496'>496</a>
<a id='n497' href='#n497'>497</a>
<a id='n498' href='#n498'>498</a>
<a id='n499' href='#n499'>499</a>
<a id='n500' href='#n500'>500</a>
<a id='n501' href='#n501'>501</a>
<a id='n502' href='#n502'>502</a>
<a id='n503' href='#n503'>503</a>
<a id='n504' href='#n504'>504</a>
<a id='n505' href='#n505'>505</a>
<a id='n506' href='#n506'>506</a>
<a id='n507' href='#n507'>507</a>
<a id='n508' href='#n508'>508</a>
<a id='n509' href='#n509'>509</a>
<a id='n510' href='#n510'>510</a>
<a id='n511' href='#n511'>511</a>
<a id='n512' href='#n512'>512</a>
<a id='n513' href='#n513'>513</a>
<a id='n514' href='#n514'>514</a>
<a id='n515' href='#n515'>515</a>
<a id='n516' href='#n516'>516</a>
<a id='n517' href='#n517'>517</a>
<a id='n518' href='#n518'>518</a>
<a id='n519' href='#n519'>519</a>
<a id='n520' href='#n520'>520</a>
<a id='n521' href='#n521'>521</a>
<a id='n522' href='#n522'>522</a>
<a id='n523' href='#n523'>523</a>
<a id='n524' href='#n524'>524</a>
<a id='n525' href='#n525'>525</a>
<a id='n526' href='#n526'>526</a>
<a id='n527' href='#n527'>527</a>
<a id='n528' href='#n528'>528</a>
<a id='n529' href='#n529'>529</a>
<a id='n530' href='#n530'>530</a>
<a id='n531' href='#n531'>531</a>
<a id='n532' href='#n532'>532</a>
<a id='n533' href='#n533'>533</a>
<a id='n534' href='#n534'>534</a>
<a id='n535' href='#n535'>535</a>
<a id='n536' href='#n536'>536</a>
<a id='n537' href='#n537'>537</a>
<a id='n538' href='#n538'>538</a>
<a id='n539' href='#n539'>539</a>
<a id='n540' href='#n540'>540</a>
<a id='n541' href='#n541'>541</a>
<a id='n542' href='#n542'>542</a>
<a id='n543' href='#n543'>543</a>
<a id='n544' href='#n544'>544</a>
<a id='n545' href='#n545'>545</a>
<a id='n546' href='#n546'>546</a>
<a id='n547' href='#n547'>547</a>
<a id='n548' href='#n548'>548</a>
<a id='n549' href='#n549'>549</a>
<a id='n550' href='#n550'>550</a>
<a id='n551' href='#n551'>551</a>
<a id='n552' href='#n552'>552</a>
<a id='n553' href='#n553'>553</a>
<a id='n554' href='#n554'>554</a>
<a id='n555' href='#n555'>555</a>
<a id='n556' href='#n556'>556</a>
<a id='n557' href='#n557'>557</a>
<a id='n558' href='#n558'>558</a>
<a id='n559' href='#n559'>559</a>
<a id='n560' href='#n560'>560</a>
<a id='n561' href='#n561'>561</a>
<a id='n562' href='#n562'>562</a>
<a id='n563' href='#n563'>563</a>
<a id='n564' href='#n564'>564</a>
<a id='n565' href='#n565'>565</a>
<a id='n566' href='#n566'>566</a>
<a id='n567' href='#n567'>567</a>
<a id='n568' href='#n568'>568</a>
<a id='n569' href='#n569'>569</a>
<a id='n570' href='#n570'>570</a>
<a id='n571' href='#n571'>571</a>
<a id='n572' href='#n572'>572</a>
</pre></td>
<td class='lines'><pre><code>CVE-2015-7547

2016-02-15  Carlos O'Donell  &lt;carlos&#64;redhat.com&gt;

	[BZ #18665]
	* resolv/nss_dns/dns-host.c (gaih_getanswer_slice): Always set
	*herrno_p.
	(gaih_getanswer): Document functional behviour. Return tryagain
	if any result is tryagain.
	* resolv/res_query.c (__libc_res_nsearch): Set buffer size to zero
	when freed.
	* resolv/res_send.c: Add copyright text.
	(__libc_res_nsend): Document that MAXPACKET is expected.
	(send_vc): Document. Remove buffer reuse.
	(send_dg): Document. Remove buffer reuse. Set *thisanssizp to set the
	size of the buffer. Add Dprint for truncated UDP buffer.

diff --git a/resolv/nss_dns/dns-host.c b/resolv/nss_dns/dns-host.c
index a255d5e..47cfe27 100644
<span class="hl kwb">--- a/resolv/nss_dns/dns-host.c</span>
<span class="hl kwa">+++ b/resolv/nss_dns/dns-host.c</span>
&#64;&#64; -1031,7 +1031,10 &#64;&#64; gaih_getanswer_slice (const querybuf *answer, int anslen, const char *qname,
   int h_namelen = 0;
 
   if (ancount == 0)
<span class="hl kwb">-    return NSS_STATUS_NOTFOUND;</span>
<span class="hl kwa">+    {</span>
<span class="hl kwa">+      *h_errnop = HOST_NOT_FOUND;</span>
<span class="hl kwa">+      return NSS_STATUS_NOTFOUND;</span>
<span class="hl kwa">+    }</span>
 
   while (ancount-- &gt; 0 &amp;&amp; cp &lt; end_of_message &amp;&amp; had_error == 0)
     {
&#64;&#64; -1208,7 +1211,14 &#64;&#64; gaih_getanswer_slice (const querybuf *answer, int anslen, const char *qname,
   /* Special case here: if the resolver sent a result but it only
      contains a CNAME while we are looking for a T_A or T_AAAA record,
      we fail with NOTFOUND instead of TRYAGAIN.  */
<span class="hl kwb">-  return canon == NULL ? NSS_STATUS_TRYAGAIN : NSS_STATUS_NOTFOUND;</span>
<span class="hl kwa">+  if (canon != NULL)</span>
<span class="hl kwa">+    {</span>
<span class="hl kwa">+      *h_errnop = HOST_NOT_FOUND;</span>
<span class="hl kwa">+      return NSS_STATUS_NOTFOUND;</span>
<span class="hl kwa">+    }</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+  *h_errnop = NETDB_INTERNAL;</span>
<span class="hl kwa">+  return NSS_STATUS_TRYAGAIN;</span>
 }
 
 
&#64;&#64; -1222,11 +1232,101 &#64;&#64; gaih_getanswer (const querybuf *answer1, int anslen1, const querybuf *answer2,
 
   enum nss_status status = NSS_STATUS_NOTFOUND;
 
<span class="hl kwa">+  /* Combining the NSS status of two distinct queries requires some</span>
<span class="hl kwa">+     compromise and attention to symmetry (A or AAAA queries can be</span>
<span class="hl kwa">+     returned in any order).  What follows is a breakdown of how this</span>
<span class="hl kwa">+     code is expected to work and why. We discuss only SUCCESS,</span>
<span class="hl kwa">+     TRYAGAIN, NOTFOUND and UNAVAIL, since they are the only returns</span>
<span class="hl kwa">+     that apply (though RETURN and MERGE exist).  We make a distinction</span>
<span class="hl kwa">+     between TRYAGAIN (recoverable) and TRYAGAIN' (not-recoverable).</span>
<span class="hl kwa">+     A recoverable TRYAGAIN is almost always due to buffer size issues</span>
<span class="hl kwa">+     and returns ERANGE in errno and the caller is expected to retry</span>
<span class="hl kwa">+     with a larger buffer.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+     Lastly, you may be tempted to make significant changes to the</span>
<span class="hl kwa">+     conditions in this code to bring about symmetry between responses.</span>
<span class="hl kwa">+     Please don't change anything without due consideration for</span>
<span class="hl kwa">+     expected application behaviour.  Some of the synthesized responses</span>
<span class="hl kwa">+     aren't very well thought out and sometimes appear to imply that</span>
<span class="hl kwa">+     IPv4 responses are always answer 1, and IPv6 responses are always</span>
<span class="hl kwa">+     answer 2, but that's not true (see the implemetnation of send_dg</span>
<span class="hl kwa">+     and send_vc to see response can arrive in any order, particlarly</span>
<span class="hl kwa">+     for UDP). However, we expect it holds roughly enough of the time</span>
<span class="hl kwa">+     that this code works, but certainly needs to be fixed to make this</span>
<span class="hl kwa">+     a more robust implementation.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+     ----------------------------------------------</span>
<span class="hl kwa">+     | Answer 1 Status /   | Synthesized | Reason |</span>
<span class="hl kwa">+     | Answer 2 Status     | Status      |        |</span>
<span class="hl kwa">+     |--------------------------------------------|</span>
<span class="hl kwa">+     | SUCCESS/SUCCESS     | SUCCESS     | [1]    |</span>
<span class="hl kwa">+     | SUCCESS/TRYAGAIN    | TRYAGAIN    | [5]    |</span>
<span class="hl kwa">+     | SUCCESS/TRYAGAIN'   | SUCCESS     | [1]    |</span>
<span class="hl kwa">+     | SUCCESS/NOTFOUND    | SUCCESS     | [1]    |</span>
<span class="hl kwa">+     | SUCCESS/UNAVAIL     | SUCCESS     | [1]    |</span>
<span class="hl kwa">+     | TRYAGAIN/SUCCESS    | TRYAGAIN    | [2]    |</span>
<span class="hl kwa">+     | TRYAGAIN/TRYAGAIN   | TRYAGAIN    | [2]    |</span>
<span class="hl kwa">+     | TRYAGAIN/TRYAGAIN'  | TRYAGAIN    | [2]    |</span>
<span class="hl kwa">+     | TRYAGAIN/NOTFOUND   | TRYAGAIN    | [2]    |</span>
<span class="hl kwa">+     | TRYAGAIN/UNAVAIL    | TRYAGAIN    | [2]    |</span>
<span class="hl kwa">+     | TRYAGAIN'/SUCCESS   | SUCCESS     | [3]    |</span>
<span class="hl kwa">+     | TRYAGAIN'/TRYAGAIN  | TRYAGAIN    | [3]    |</span>
<span class="hl kwa">+     | TRYAGAIN'/TRYAGAIN' | TRYAGAIN'   | [3]    |</span>
<span class="hl kwa">+     | TRYAGAIN'/NOTFOUND  | TRYAGAIN'   | [3]    |</span>
<span class="hl kwa">+     | TRYAGAIN'/UNAVAIL   | UNAVAIL     | [3]    |</span>
<span class="hl kwa">+     | NOTFOUND/SUCCESS    | SUCCESS     | [3]    |</span>
<span class="hl kwa">+     | NOTFOUND/TRYAGAIN   | TRYAGAIN    | [3]    |</span>
<span class="hl kwa">+     | NOTFOUND/TRYAGAIN'  | TRYAGAIN'   | [3]    |</span>
<span class="hl kwa">+     | NOTFOUND/NOTFOUND   | NOTFOUND    | [3]    |</span>
<span class="hl kwa">+     | NOTFOUND/UNAVAIL    | UNAVAIL     | [3]    |</span>
<span class="hl kwa">+     | UNAVAIL/SUCCESS     | UNAVAIL     | [4]    |</span>
<span class="hl kwa">+     | UNAVAIL/TRYAGAIN    | UNAVAIL     | [4]    |</span>
<span class="hl kwa">+     | UNAVAIL/TRYAGAIN'   | UNAVAIL     | [4]    |</span>
<span class="hl kwa">+     | UNAVAIL/NOTFOUND    | UNAVAIL     | [4]    |</span>
<span class="hl kwa">+     | UNAVAIL/UNAVAIL     | UNAVAIL     | [4]    |</span>
<span class="hl kwa">+     ----------------------------------------------</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+     [1] If the first response is a success we return success.</span>
<span class="hl kwa">+         This ignores the state of the second answer and in fact</span>
<span class="hl kwa">+         incorrectly sets errno and h_errno to that of the second</span>
<span class="hl kwa">+	 answer.  However because the response is a success we ignore</span>
<span class="hl kwa">+	 *errnop and *h_errnop (though that means you touched errno on</span>
<span class="hl kwa">+         success).  We are being conservative here and returning the</span>
<span class="hl kwa">+         likely IPv4 response in the first answer as a success.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+     [2] If the first response is a recoverable TRYAGAIN we return</span>
<span class="hl kwa">+	 that instead of looking at the second response.  The</span>
<span class="hl kwa">+	 expectation here is that we have failed to get an IPv4 response</span>
<span class="hl kwa">+	 and should retry both queries.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+     [3] If the first response was not a SUCCESS and the second</span>
<span class="hl kwa">+	 response is not NOTFOUND (had a SUCCESS, need to TRYAGAIN,</span>
<span class="hl kwa">+	 or failed entirely e.g. TRYAGAIN' and UNAVAIL) then use the</span>
<span class="hl kwa">+	 result from the second response, otherwise the first responses</span>
<span class="hl kwa">+	 status is used.  Again we have some odd side-effects when the</span>
<span class="hl kwa">+	 second response is NOTFOUND because we overwrite *errnop and</span>
<span class="hl kwa">+	 *h_errnop that means that a first answer of NOTFOUND might see</span>
<span class="hl kwa">+	 its *errnop and *h_errnop values altered.  Whether it matters</span>
<span class="hl kwa">+	 in practice that a first response NOTFOUND has the wrong</span>
<span class="hl kwa">+	 *errnop and *h_errnop is undecided.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+     [4] If the first response is UNAVAIL we return that instead of</span>
<span class="hl kwa">+	 looking at the second response.  The expectation here is that</span>
<span class="hl kwa">+	 it will have failed similarly e.g. configuration failure.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+     [5] Testing this code is complicated by the fact that truncated</span>
<span class="hl kwa">+	 second response buffers might be returned as SUCCESS if the</span>
<span class="hl kwa">+	 first answer is a SUCCESS.  To fix this we add symmetry to</span>
<span class="hl kwa">+	 TRYAGAIN with the second response.  If the second response</span>
<span class="hl kwa">+	 is a recoverable error we now return TRYAGIN even if the first</span>
<span class="hl kwa">+	 response was SUCCESS.  */</span>
<span class="hl kwa">+</span>
   if (anslen1 &gt; 0)
     status = gaih_getanswer_slice(answer1, anslen1, qname,
 				  &amp;pat, &amp;buffer, &amp;buflen,
 				  errnop, h_errnop, ttlp,
 				  &amp;first);
<span class="hl kwa">+</span>
   if ((status == NSS_STATUS_SUCCESS || status == NSS_STATUS_NOTFOUND
        || (status == NSS_STATUS_TRYAGAIN
 	   /* We want to look at the second answer in case of an
&#64;&#64; -1242,8 +1342,15 &#64;&#64; gaih_getanswer (const querybuf *answer1, int anslen1, const querybuf *answer2,
 						     &amp;pat, &amp;buffer, &amp;buflen,
 						     errnop, h_errnop, ttlp,
 						     &amp;first);
<span class="hl kwa">+      /* Use the second response status in some cases.  */</span>
       if (status != NSS_STATUS_SUCCESS &amp;&amp; status2 != NSS_STATUS_NOTFOUND)
 	status = status2;
<span class="hl kwa">+      /* Do not return a truncated second response (unless it was</span>
<span class="hl kwa">+         unavoidable e.g. unrecoverable TRYAGAIN).  */</span>
<span class="hl kwa">+      if (status == NSS_STATUS_SUCCESS</span>
<span class="hl kwa">+	  &amp;&amp; (status2 == NSS_STATUS_TRYAGAIN</span>
<span class="hl kwa">+	      &amp;&amp; *errnop == ERANGE &amp;&amp; *h_errnop != NO_RECOVERY))</span>
<span class="hl kwa">+	status = NSS_STATUS_TRYAGAIN;</span>
     }
 
   return status;
diff --git a/resolv/res_query.c b/resolv/res_query.c
index 4a9b3b3..95470a9 100644
<span class="hl kwb">--- a/resolv/res_query.c</span>
<span class="hl kwa">+++ b/resolv/res_query.c</span>
&#64;&#64; -396,6 +396,7 &#64;&#64; __libc_res_nsearch(res_state statp,
 		  {
 		    free (*answerp2);
 		    *answerp2 = NULL;
<span class="hl kwa">+		    *nanswerp2 = 0;</span>
 		    *answerp2_malloced = 0;
 		  }
 	}
&#64;&#64; -447,6 +448,7 &#64;&#64; __libc_res_nsearch(res_state statp,
 			  {
 			    free (*answerp2);
 			    *answerp2 = NULL;
<span class="hl kwa">+			    *nanswerp2 = 0;</span>
 			    *answerp2_malloced = 0;
 			  }
 
&#64;&#64; -521,6 +523,7 &#64;&#64; __libc_res_nsearch(res_state statp,
 	  {
 	    free (*answerp2);
 	    *answerp2 = NULL;
<span class="hl kwa">+	    *nanswerp2 = 0;</span>
 	    *answerp2_malloced = 0;
 	  }
 	if (saved_herrno != -1)
diff --git a/resolv/res_send.c b/resolv/res_send.c
index a968b95..21843f1 100644
<span class="hl kwb">--- a/resolv/res_send.c</span>
<span class="hl kwa">+++ b/resolv/res_send.c</span>
<span class="hl kwd">&#64;&#64; -1,3 +1,20 &#64;&#64;</span>
<span class="hl kwa">+/* Copyright (C) 2016 Free Software Foundation, Inc.</span>
<span class="hl kwa">+   This file is part of the GNU C Library.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   The GNU C Library is free software; you can redistribute it and/or</span>
<span class="hl kwa">+   modify it under the terms of the GNU Lesser General Public</span>
<span class="hl kwa">+   License as published by the Free Software Foundation; either</span>
<span class="hl kwa">+   version 2.1 of the License, or (at your option) any later version.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   The GNU C Library is distributed in the hope that it will be useful,</span>
<span class="hl kwa">+   but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<span class="hl kwa">+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<span class="hl kwa">+   Lesser General Public License for more details.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   You should have received a copy of the GNU Lesser General Public</span>
<span class="hl kwa">+   License along with the GNU C Library; if not, see</span>
<span class="hl kwa">+   &lt;http://www.gnu.org/licenses/&gt;.  */</span>
<span class="hl kwa">+</span>
 /*
  * Copyright (c) 1985, 1989, 1993
  *    The Regents of the University of California.  All rights reserved.
&#64;&#64; -355,6 +372,8 &#64;&#64; __libc_res_nsend(res_state statp, const u_char *buf, int buflen,
 #ifdef USE_HOOKS
 	if (__glibc_unlikely (statp-&gt;qhook || statp-&gt;rhook))       {
 		if (anssiz &lt; MAXPACKET &amp;&amp; ansp) {
<span class="hl kwa">+			/* Always allocate MAXPACKET, callers expect</span>
<span class="hl kwa">+			   this specific size.  */</span>
 			u_char *buf = malloc (MAXPACKET);
 			if (buf == NULL)
 				return (-1);
&#64;&#64; -630,6 +649,77 &#64;&#64; get_nsaddr (res_state statp, int n)
     return (struct sockaddr *) (void *) &amp;statp-&gt;nsaddr_list[n];
 }
 
<span class="hl kwa">+/* The send_vc function is responsible for sending a DNS query over TCP</span>
<span class="hl kwa">+   to the nameserver numbered NS from the res_state STATP i.e.</span>
<span class="hl kwa">+   EXT(statp).nssocks[ns].  The function supports sending both IPv4 and</span>
<span class="hl kwa">+   IPv6 queries at the same serially on the same socket.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   Please note that for TCP there is no way to disable sending both</span>
<span class="hl kwa">+   queries, unlike UDP, which honours RES_SNGLKUP and RES_SNGLKUPREOP</span>
<span class="hl kwa">+   and sends the queries serially and waits for the result after each</span>
<span class="hl kwa">+   sent query.  This implemetnation should be corrected to honour these</span>
<span class="hl kwa">+   options.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   Please also note that for TCP we send both queries over the same</span>
<span class="hl kwa">+   socket one after another.  This technically violates best practice</span>
<span class="hl kwa">+   since the server is allowed to read the first query, respond, and</span>
<span class="hl kwa">+   then close the socket (to service another client).  If the server</span>
<span class="hl kwa">+   does this, then the remaining second query in the socket data buffer</span>
<span class="hl kwa">+   will cause the server to send the client an RST which will arrive</span>
<span class="hl kwa">+   asynchronously and the client's OS will likely tear down the socket</span>
<span class="hl kwa">+   receive buffer resulting in a potentially short read and lost</span>
<span class="hl kwa">+   response data.  This will force the client to retry the query again,</span>
<span class="hl kwa">+   and this process may repeat until all servers and connection resets</span>
<span class="hl kwa">+   are exhausted and then the query will fail.  It's not known if this</span>
<span class="hl kwa">+   happens with any frequency in real DNS server implementations.  This</span>
<span class="hl kwa">+   implementation should be corrected to use two sockets by default for</span>
<span class="hl kwa">+   parallel queries.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   The query stored in BUF of BUFLEN length is sent first followed by</span>
<span class="hl kwa">+   the query stored in BUF2 of BUFLEN2 length.  Queries are sent</span>
<span class="hl kwa">+   serially on the same socket.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   Answers to the query are stored firstly in *ANSP up to a max of</span>
<span class="hl kwa">+   *ANSSIZP bytes.  If more than *ANSSIZP bytes are needed and ANSCP</span>
<span class="hl kwa">+   is non-NULL (to indicate that modifying the answer buffer is allowed)</span>
<span class="hl kwa">+   then malloc is used to allocate a new response buffer and ANSCP and</span>
<span class="hl kwa">+   ANSP will both point to the new buffer.  If more than *ANSSIZP bytes</span>
<span class="hl kwa">+   are needed but ANSCP is NULL, then as much of the response as</span>
<span class="hl kwa">+   possible is read into the buffer, but the results will be truncated.</span>
<span class="hl kwa">+   When truncation happens because of a small answer buffer the DNS</span>
<span class="hl kwa">+   packets header feild TC will bet set to 1, indicating a truncated</span>
<span class="hl kwa">+   message and the rest of the socket data will be read and discarded.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   Answers to the query are stored secondly in *ANSP2 up to a max of</span>
<span class="hl kwa">+   *ANSSIZP2 bytes, with the actual response length stored in</span>
<span class="hl kwa">+   *RESPLEN2.  If more than *ANSSIZP bytes are needed and ANSP2</span>
<span class="hl kwa">+   is non-NULL (required for a second query) then malloc is used to</span>
<span class="hl kwa">+   allocate a new response buffer, *ANSSIZP2 is set to the new buffer</span>
<span class="hl kwa">+   size and *ANSP2_MALLOCED is set to 1.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   The ANSP2_MALLOCED argument will eventually be removed as the</span>
<span class="hl kwa">+   change in buffer pointer can be used to detect the buffer has</span>
<span class="hl kwa">+   changed and that the caller should use free on the new buffer.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   Note that the answers may arrive in any order from the server and</span>
<span class="hl kwa">+   therefore the first and second answer buffers may not correspond to</span>
<span class="hl kwa">+   the first and second queries.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   It is not supported to call this function with a non-NULL ANSP2</span>
<span class="hl kwa">+   but a NULL ANSCP.  Put another way, you can call send_vc with a</span>
<span class="hl kwa">+   single unmodifiable buffer or two modifiable buffers, but no other</span>
<span class="hl kwa">+   combination is supported.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   It is the caller's responsibility to free the malloc allocated</span>
<span class="hl kwa">+   buffers by detecting that the pointers have changed from their</span>
<span class="hl kwa">+   original values i.e. *ANSCP or *ANSP2 has changed.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   If errors are encountered then *TERRNO is set to an appropriate</span>
<span class="hl kwa">+   errno value and a zero result is returned for a recoverable error,</span>
<span class="hl kwa">+   and a less-than zero result is returned for a non-recoverable error.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   If no errors are encountered then *TERRNO is left unmodified and</span>
<span class="hl kwa">+   a the length of the first response in bytes is returned.  */</span>
 static int
 send_vc(res_state statp,
 	const u_char *buf, int buflen, const u_char *buf2, int buflen2,
&#64;&#64; -639,11 +729,7 &#64;&#64; send_vc(res_state statp,
 {
 	const HEADER *hp = (HEADER *) buf;
 	const HEADER *hp2 = (HEADER *) buf2;
<span class="hl kwb">-	u_char *ans = *ansp;</span>
<span class="hl kwb">-	int orig_anssizp = *anssizp;</span>
<span class="hl kwb">-	// XXX REMOVE</span>
<span class="hl kwb">-	// int anssiz = *anssizp;</span>
<span class="hl kwb">-	HEADER *anhp = (HEADER *) ans;</span>
<span class="hl kwa">+	HEADER *anhp = (HEADER *) *ansp;</span>
 	struct sockaddr *nsap = get_nsaddr (statp, ns);
 	int truncating, connreset, n;
 	/* On some architectures compiler might emit a warning indicating
&#64;&#64; -731,6 +817,8 &#64;&#64; send_vc(res_state statp,
 	 * Receive length &amp; response
 	 */
 	int recvresp1 = 0;
<span class="hl kwa">+	/* Skip the second response if there is no second query.</span>
<span class="hl kwa">+           To do that we mark the second response as received.  */</span>
 	int recvresp2 = buf2 == NULL;
 	uint16_t rlen16;
  read_len:
&#64;&#64; -767,40 +855,14 &#64;&#64; send_vc(res_state statp,
 	u_char **thisansp;
 	int *thisresplenp;
 	if ((recvresp1 | recvresp2) == 0 || buf2 == NULL) {
<span class="hl kwa">+		/* We have not received any responses</span>
<span class="hl kwa">+		   yet or we only have one response to</span>
<span class="hl kwa">+		   receive.  */</span>
 		thisanssizp = anssizp;
 		thisansp = anscp ?: ansp;
 		assert (anscp != NULL || ansp2 == NULL);
 		thisresplenp = &amp;resplen;
 	} else {
<span class="hl kwb">-		if (*anssizp != MAXPACKET) {</span>
<span class="hl kwb">-			/* No buffer allocated for the first</span>
<span class="hl kwb">-			   reply.  We can try to use the rest</span>
<span class="hl kwb">-			   of the user-provided buffer.  */</span>
<span class="hl kwb">-#if __GNUC_PREREQ (4, 7)</span>
<span class="hl kwb">-			DIAG_PUSH_NEEDS_COMMENT;</span>
<span class="hl kwb">-			DIAG_IGNORE_NEEDS_COMMENT (5, &quot;-Wmaybe-uninitialized&quot;);</span>
<span class="hl kwb">-#endif</span>
<span class="hl kwb">-#if _STRING_ARCH_unaligned</span>
<span class="hl kwb">-			*anssizp2 = orig_anssizp - resplen;</span>
<span class="hl kwb">-			*ansp2 = *ansp + resplen;</span>
<span class="hl kwb">-#else</span>
<span class="hl kwb">-			int aligned_resplen</span>
<span class="hl kwb">-			  = ((resplen + __alignof__ (HEADER) - 1)</span>
<span class="hl kwb">-			     &amp; ~(__alignof__ (HEADER) - 1));</span>
<span class="hl kwb">-			*anssizp2 = orig_anssizp - aligned_resplen;</span>
<span class="hl kwb">-			*ansp2 = *ansp + aligned_resplen;</span>
<span class="hl kwb">-#endif</span>
<span class="hl kwb">-#if __GNUC_PREREQ (4, 7)</span>
<span class="hl kwb">-			DIAG_POP_NEEDS_COMMENT;</span>
<span class="hl kwb">-#endif</span>
<span class="hl kwb">-		} else {</span>
<span class="hl kwb">-			/* The first reply did not fit into the</span>
<span class="hl kwb">-			   user-provided buffer.  Maybe the second</span>
<span class="hl kwb">-			   answer will.  */</span>
<span class="hl kwb">-			*anssizp2 = orig_anssizp;</span>
<span class="hl kwb">-			*ansp2 = *ansp;</span>
<span class="hl kwb">-		}</span>
<span class="hl kwb">-</span>
 		thisanssizp = anssizp2;
 		thisansp = ansp2;
 		thisresplenp = resplen2;
&#64;&#64; -804,10 +870,14 &#64;&#64; send_vc(res_state statp,
 	anhp = (HEADER *) *thisansp;
 
 	*thisresplenp = rlen;
<span class="hl kwb">-	if (rlen &gt; *thisanssizp) {</span>
<span class="hl kwb">-		/* Yes, we test ANSCP here.  If we have two buffers</span>
<span class="hl kwb">-		   both will be allocatable.  */</span>
<span class="hl kwb">-		if (__glibc_likely (anscp != NULL))       {</span>
<span class="hl kwa">+	/* Is the answer buffer too small?  */</span>
<span class="hl kwa">+	if (*thisanssizp &lt; rlen) {</span>
<span class="hl kwa">+		/* If the current buffer is not the the static</span>
<span class="hl kwa">+		   user-supplied buffer then we can reallocate</span>
<span class="hl kwa">+		   it.  */</span>
<span class="hl kwa">+		if (thisansp != NULL &amp;&amp; thisansp != ansp) {</span>
<span class="hl kwa">+			/* Always allocate MAXPACKET, callers expect</span>
<span class="hl kwa">+			   this specific size.  */</span>
 			u_char *newp = malloc (MAXPACKET);
 			if (newp == NULL) {
 				*terrno = ENOMEM;
&#64;&#64; -819,6 +889,9 &#64;&#64; send_vc(res_state statp,
 			if (thisansp == ansp2)
 			  *ansp2_malloced = 1;
 			anhp = (HEADER *) newp;
<span class="hl kwa">+			/* A uint16_t can't be larger than MAXPACKET</span>
<span class="hl kwa">+			   thus it's safe to allocate MAXPACKET but</span>
<span class="hl kwa">+			   read RLEN bytes instead.  */</span>
 			len = rlen;
 		} else {
 			Dprint(statp-&gt;options &amp; RES_DEBUG,
&#64;&#64; -948,6 +1021,66 &#64;&#64; reopen (res_state statp, int *terrno, int ns)
 	return 1;
 }
 
<span class="hl kwa">+/* The send_dg function is responsible for sending a DNS query over UDP</span>
<span class="hl kwa">+   to the nameserver numbered NS from the res_state STATP i.e.</span>
<span class="hl kwa">+   EXT(statp).nssocks[ns].  The function supports IPv4 and IPv6 queries</span>
<span class="hl kwa">+   along with the ability to send the query in parallel for both stacks</span>
<span class="hl kwa">+   (default) or serially (RES_SINGLKUP).  It also supports serial lookup</span>
<span class="hl kwa">+   with a close and reopen of the socket used to talk to the server</span>
<span class="hl kwa">+   (RES_SNGLKUPREOP) to work around broken name servers.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   The query stored in BUF of BUFLEN length is sent first followed by</span>
<span class="hl kwa">+   the query stored in BUF2 of BUFLEN2 length.  Queries are sent</span>
<span class="hl kwa">+   in parallel (default) or serially (RES_SINGLKUP or RES_SNGLKUPREOP).</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   Answers to the query are stored firstly in *ANSP up to a max of</span>
<span class="hl kwa">+   *ANSSIZP bytes.  If more than *ANSSIZP bytes are needed and ANSCP</span>
<span class="hl kwa">+   is non-NULL (to indicate that modifying the answer buffer is allowed)</span>
<span class="hl kwa">+   then malloc is used to allocate a new response buffer and ANSCP and</span>
<span class="hl kwa">+   ANSP will both point to the new buffer.  If more than *ANSSIZP bytes</span>
<span class="hl kwa">+   are needed but ANSCP is NULL, then as much of the response as</span>
<span class="hl kwa">+   possible is read into the buffer, but the results will be truncated.</span>
<span class="hl kwa">+   When truncation happens because of a small answer buffer the DNS</span>
<span class="hl kwa">+   packets header feild TC will bet set to 1, indicating a truncated</span>
<span class="hl kwa">+   message, while the rest of the UDP packet is discarded.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   Answers to the query are stored secondly in *ANSP2 up to a max of</span>
<span class="hl kwa">+   *ANSSIZP2 bytes, with the actual response length stored in</span>
<span class="hl kwa">+   *RESPLEN2.  If more than *ANSSIZP bytes are needed and ANSP2</span>
<span class="hl kwa">+   is non-NULL (required for a second query) then malloc is used to</span>
<span class="hl kwa">+   allocate a new response buffer, *ANSSIZP2 is set to the new buffer</span>
<span class="hl kwa">+   size and *ANSP2_MALLOCED is set to 1.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   The ANSP2_MALLOCED argument will eventually be removed as the</span>
<span class="hl kwa">+   change in buffer pointer can be used to detect the buffer has</span>
<span class="hl kwa">+   changed and that the caller should use free on the new buffer.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   Note that the answers may arrive in any order from the server and</span>
<span class="hl kwa">+   therefore the first and second answer buffers may not correspond to</span>
<span class="hl kwa">+   the first and second queries.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   It is not supported to call this function with a non-NULL ANSP2</span>
<span class="hl kwa">+   but a NULL ANSCP.  Put another way, you can call send_vc with a</span>
<span class="hl kwa">+   single unmodifiable buffer or two modifiable buffers, but no other</span>
<span class="hl kwa">+   combination is supported.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   It is the caller's responsibility to free the malloc allocated</span>
<span class="hl kwa">+   buffers by detecting that the pointers have changed from their</span>
<span class="hl kwa">+   original values i.e. *ANSCP or *ANSP2 has changed.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   If an answer is truncated because of UDP datagram DNS limits then</span>
<span class="hl kwa">+   *V_CIRCUIT is set to 1 and the return value non-zero to indicate to</span>
<span class="hl kwa">+   the caller to retry with TCP.  The value *GOTSOMEWHERE is set to 1</span>
<span class="hl kwa">+   if any progress was made reading a response from the nameserver and</span>
<span class="hl kwa">+   is used by the caller to distinguish between ECONNREFUSED and</span>
<span class="hl kwa">+   ETIMEDOUT (the latter if *GOTSOMEWHERE is 1).</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   If errors are encountered then *TERRNO is set to an appropriate</span>
<span class="hl kwa">+   errno value and a zero result is returned for a recoverable error,</span>
<span class="hl kwa">+   and a less-than zero result is returned for a non-recoverable error.</span>
<span class="hl kwa">+</span>
<span class="hl kwa">+   If no errors are encountered then *TERRNO is left unmodified and</span>
<span class="hl kwa">+   a the length of the first response in bytes is returned.  */</span>
 static int
 send_dg(res_state statp,
 	const u_char *buf, int buflen, const u_char *buf2, int buflen2,
&#64;&#64; -957,8 +1090,6 &#64;&#64; send_dg(res_state statp,
 {
 	const HEADER *hp = (HEADER *) buf;
 	const HEADER *hp2 = (HEADER *) buf2;
<span class="hl kwb">-	u_char *ans = *ansp;</span>
<span class="hl kwb">-	int orig_anssizp = *anssizp;</span>
 	struct timespec now, timeout, finish;
 	struct pollfd pfd[1];
 	int ptimeout;
&#64;&#64; -991,6 +1122,8 &#64;&#64; send_dg(res_state statp,
 	int need_recompute = 0;
 	int nwritten = 0;
 	int recvresp1 = 0;
<span class="hl kwa">+	/* Skip the second response if there is no second query.</span>
<span class="hl kwa">+           To do that we mark the second response as received.  */</span>
 	int recvresp2 = buf2 == NULL;
 	pfd[0].fd = EXT(statp).nssocks[ns];
 	pfd[0].events = POLLOUT;
&#64;&#64; -1154,55 +1287,56 &#64;&#64; send_dg(res_state statp,
 		int *thisresplenp;
 
 		if ((recvresp1 | recvresp2) == 0 || buf2 == NULL) {
<span class="hl kwa">+			/* We have not received any responses</span>
<span class="hl kwa">+			   yet or we only have one response to</span>
<span class="hl kwa">+			   receive.  */</span>
 			thisanssizp = anssizp;
 			thisansp = anscp ?: ansp;
 			assert (anscp != NULL || ansp2 == NULL);
 			thisresplenp = &amp;resplen;
 		} else {
<span class="hl kwb">-			if (*anssizp != MAXPACKET) {</span>
<span class="hl kwb">-				/* No buffer allocated for the first</span>
<span class="hl kwb">-				   reply.  We can try to use the rest</span>
<span class="hl kwb">-				   of the user-provided buffer.  */</span>
<span class="hl kwb">-#if _STRING_ARCH_unaligned</span>
<span class="hl kwb">-				*anssizp2 = orig_anssizp - resplen;</span>
<span class="hl kwb">-				*ansp2 = *ansp + resplen;</span>
<span class="hl kwb">-#else</span>
<span class="hl kwb">-				int aligned_resplen</span>
<span class="hl kwb">-				  = ((resplen + __alignof__ (HEADER) - 1)</span>
<span class="hl kwb">-				     &amp; ~(__alignof__ (HEADER) - 1));</span>
<span class="hl kwb">-				*anssizp2 = orig_anssizp - aligned_resplen;</span>
<span class="hl kwb">-				*ansp2 = *ansp + aligned_resplen;</span>
<span class="hl kwb">-#endif</span>
<span class="hl kwb">-			} else {</span>
<span class="hl kwb">-				/* The first reply did not fit into the</span>
<span class="hl kwb">-				   user-provided buffer.  Maybe the second</span>
<span class="hl kwb">-				   answer will.  */</span>
<span class="hl kwb">-				*anssizp2 = orig_anssizp;</span>
<span class="hl kwb">-				*ansp2 = *ansp;</span>
<span class="hl kwb">-			}</span>
<span class="hl kwb">-</span>
 			thisanssizp = anssizp2;
 			thisansp = ansp2;
 			thisresplenp = resplen2;
 		}
 
 		if (*thisanssizp &lt; MAXPACKET
<span class="hl kwb">-		    /* Yes, we test ANSCP here.  If we have two buffers</span>
<span class="hl kwb">-		       both will be allocatable.  */</span>
<span class="hl kwb">-		    &amp;&amp; anscp</span>
<span class="hl kwa">+		    /* If the current buffer is not the the static</span>
<span class="hl kwa">+		       user-supplied buffer then we can reallocate</span>
<span class="hl kwa">+		       it.  */</span>
<span class="hl kwa">+		    &amp;&amp; (thisansp != NULL &amp;&amp; thisansp != ansp)</span>
 #ifdef FIONREAD
<span class="hl kwa">+		    /* Is the size too small?  */</span>
 		    &amp;&amp; (ioctl (pfd[0].fd, FIONREAD, thisresplenp) &lt; 0
 			|| *thisanssizp &lt; *thisresplenp)
 #endif
                     ) {
<span class="hl kwa">+			/* Always allocate MAXPACKET, callers expect</span>
<span class="hl kwa">+			   this specific size.  */</span>
 			u_char *newp = malloc (MAXPACKET);
 			if (newp != NULL) {
<span class="hl kwb">-				*anssizp = MAXPACKET;</span>
<span class="hl kwb">-				*thisansp = ans = newp;</span>
<span class="hl kwa">+				*thisanssizp = MAXPACKET;</span>
<span class="hl kwa">+				*thisansp = newp;</span>
 				if (thisansp == ansp2)
 				  *ansp2_malloced = 1;
 			}
 		}
<span class="hl kwa">+		/* We could end up with truncation if anscp was NULL</span>
<span class="hl kwa">+		   (not allowed to change caller's buffer) and the</span>
<span class="hl kwa">+		   response buffer size is too small.  This isn't a</span>
<span class="hl kwa">+		   reliable way to detect truncation because the ioctl</span>
<span class="hl kwa">+		   may be an inaccurate report of the UDP message size.</span>
<span class="hl kwa">+		   Therefore we use this only to issue debug output.</span>
<span class="hl kwa">+		   To do truncation accurately with UDP we need</span>
<span class="hl kwa">+		   MSG_TRUNC which is only available on Linux.  We</span>
<span class="hl kwa">+		   can abstract out the Linux-specific feature in the</span>
<span class="hl kwa">+		   future to detect truncation.  */</span>
<span class="hl kwa">+		if (__glibc_unlikely (*thisanssizp &lt; *thisresplenp)) {</span>
<span class="hl kwa">+			Dprint(statp-&gt;options &amp; RES_DEBUG,</span>
<span class="hl kwa">+			       (stdout, &quot;;; response may be truncated (UDP)\n&quot;)</span>
<span class="hl kwa">+			);</span>
<span class="hl kwa">+		}</span>
<span class="hl kwa">+</span>
 		HEADER *anhp = (HEADER *) *thisansp;
 		socklen_t fromlen = sizeof(struct sockaddr_in6);
 		assert (sizeof(from) &lt;= fromlen);

</code></pre></td></tr></table>
</div> <!-- class=content -->
<div class="foot" style="padding-left:1em;padding-right:1em;">
<p>Copyright &copy; 2002-2014 <a href="mailto:jvinet@zeroflux.org"
title="contact Judd Vinet">Judd Vinet</a> and <a href="mailto:aaron@archlinux.org"
title="contact Aaron Griffin">Aaron Griffin</a>. The Arch Linux name and logo
are recognized trademarks. Some rights reserved. The registered trademark
Linux&reg; is used pursuant to a sublicense from LMI, the exclusive licensee
of Linus Torvalds, owner of the mark on a world-wide basis.</p>
</div>
</div> <!-- id=cgit -->
</body>
</html>
